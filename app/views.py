"""
Definition of views.
"""

from datetime import datetime
from django.shortcuts import render, get_object_or_404
from django.http import HttpRequest
from .models import Printer  # Import the Printer model

def home(request):
    """Renders the home page."""
    assert isinstance(request, HttpRequest)
    return render(
        request,
        'app/index.html',
        {
            'title':'Home Page',
            'year':datetime.now().year,
        }
    )
def about(request):
    """Renders the about page."""
    assert isinstance(request, HttpRequest)
    printers = Printer.objects.all()

    print('Loaded about page')
    return render(
        request,
        'app/about.html',
        {
            'title':'About',
            'message':'This is a simple printer management system that allows you to view a list of printers. You can view the brand, model, location, IP address, MAC address, manufacture date, and comments for each printer. You can also add a new printer, edit an existing printer, or delete a printer. (Hi David - this was generated by copilot accdidentally and I thought it was worth keeping)',
            'year':datetime.now().year,
            'printers': printers,
        }
    )

def update_printers(request,printer_id,printer_brand,printer_model,printer_location,printer_ip_address,printer_mac,printer_manufacture_date,printer_comments):
    printer = get_object_or_404(Printer, pk=printer_id)
    try:
        try:
            printer_id = request.POST['addRows']
            selected_printer = Printer.objects.get(pk=printer_id)
        except ValueError:
            return render(request, 'app/about.html', {
                'selected_printer': printer[printer_id],
                'error_message': "Invalid printer ID.",
            })
        print(selected_printer.model)
    except (KeyError, printer.DoesNotExist):
        return render(request, 'app/about.html', {
            'selected_printer': printer[printer_id],
            'error_message': "Printer not found.",
        })
    else:
        selected_printer.model = printer_model
        selected_printer.brand = printer_brand
        selected_printer.location = printer_location
        selected_printer.ip_address = printer_ip_address
        selected_printer.mac_address = printer_mac
        selected_printer.manufacture_date = printer_manufacture_date
        printer_comments = printer_comments
        selected_printer.save()
        return render(request, 'app/about.html', {
            'selected_printer': printer[printer_id],
            'success_message': "Printer updated successfully.",
        })

def add_printer(request,printer_id,printer_brand,printer_model,printer_location,printer_ip_address,printer_mac,printer_manufacture_date,printer_comments):
    printer = get_object_or_404(Printer, pk=printer_id)
    try:
        try:
            printer_id = request.POST['addRows']
            selected_printer = Printer.objects.get(pk=printer_id)
        except ValueError:
            return render(request, 'app/about.html', {
                'selected_printer': printer[printer_id],
                'error_message': "Invalid printer ID.",
            })
        print(selected_printer.model)
    except (KeyError, printer.DoesNotExist):
        return render(request, 'app/about.html', {
            'selected_printer': printer[printer_id],
            'error_message': "Printer not found.",
        })
    else:
        selected_printer.model = printer_model
        selected_printer.brand = printer_brand
        selected_printer.location = printer_location
        selected_printer.ip_address = printer_ip_address
        selected_printer.mac_address = printer_mac
        selected_printer.manufacture_date = printer_manufacture_date
        printer_comments = printer_comments

def selection(request):
    # printer = get_object_or_404(Printer, pk=printer_id) 
    #printer = get_object_or_404(Printer, pk=request.POST['printer']) 
    print('HHHHEEEEERRRREEEE')
    # return render(request, 'app/about.html', {
    #     'selected_printer': printer,
    #     })
    return render(request, 'app/about.html', {})